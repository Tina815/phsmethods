[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Caldwell. Author, maintainer. Lucinda Lawrie. Reviewer. Jack Hannah. Author. Tina Fu. Author. Ciara Gribben. Author. Chris Deans. Author. Jaime Villacampa. Author. Graeme Gowans. Author. Alice Byers. Contributor. Alan Yeung. Contributor. James McMahon. Author. Nicolaos Christofidis. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caldwell D, Hannah J, Fu T, Gribben C, Deans C, Villacampa J, Gowans G, McMahon J, Christofidis N (2022). phsmethods: Standard Methods use Public Health Scotland. R package version 0.2.1, https://github.com/Health-SocialCare-Scotland/phsmethods.","code":"@Manual{,   title = {phsmethods: Standard Methods for use in Public Health Scotland},   author = {David Caldwell and Jack Hannah and Tina Fu and Ciara Gribben and Chris Deans and Jaime Villacampa and Graeme Gowans and James McMahon and Nicolaos Christofidis},   year = {2022},   note = {R package version 0.2.1},   url = {https://github.com/Health-SocialCare-Scotland/phsmethods}, }"},{"path":"/index.html","id":"phsmethods","dir":"","previous_headings":"","what":"Standard Methods for use in Public Health Scotland","title":"Standard Methods for use in Public Health Scotland","text":"phsmethods contains functions commonly undertaken analytical tasks Public Health Scotland (PHS): create_age_groups() categorises ages groups chi_check() assesses validity CHI number chi_pad() adds leading zero nine-digit CHI numbers sex_from_chi() extracts sex person CHI number file_size() returns names sizes files directory extract_fin_year() assigns date financial year format YYYY/YY match_area() converts geography codes area names format_postcode() formats improperly recorded postcodes qtr(), qtr_end(), qtr_next() qtr_prev() assign date quarter age_calculate calculates age two dates dob_from_chi extracts Date Birth (DoB) CHI number age_from_chi extracts age CHI number phsmethods can used server desktop versions RStudio.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Standard Methods for use in Public Health Scotland","text":"install phsmethods, package remotes required, can installed install.packages(\"remotes\"). can install phsmethods RStudio server GitHub : Network security settings may prevent remotes::install_github() working RStudio desktop. case, phsmethods can installed downloading zip repository running following code (replacing section marked <>, including arrows ):","code":"remotes::install_github(\"Public-Health-Scotland/phsmethods\",   upgrade = \"never\" ) remotes::install_local(\"<FILEPATH OF ZIPPED FILE>/phsmethods-master.zip\",   upgrade = \"never\" )"},{"path":"/index.html","id":"using-phsmethods","dir":"","previous_headings":"","what":"Using phsmethods","title":"Standard Methods for use in Public Health Scotland","text":"Load phsmethods using library(): see documentation phsmethods’ functions, type ?function_name RStudio console loading package:","code":"library(phsmethods) ?extract_fin_year ?format_postcode"},{"path":"/index.html","id":"create_age_groups","dir":"","previous_headings":"Using phsmethods","what":"create_age_groups","title":"Standard Methods for use in Public Health Scotland","text":"","code":"ages <- c(54, 7, 77, 1, 26, 101)  # By default create_age_groups goes in 5 year increments from 0 to 90+ create_age_groups(ages) #> [1] \"50-54\" \"5-9\"   \"75-79\" \"0-4\"   \"25-29\" \"90+\"  # But these settings can be changed create_age_groups(ages, from = 0, to = 80, by = 10) #> [1] \"50-59\" \"0-9\"   \"70-79\" \"0-9\"   \"20-29\" \"80+\""},{"path":"/index.html","id":"chi_check","dir":"","previous_headings":"Using phsmethods","what":"chi_check","title":"Standard Methods for use in Public Health Scotland","text":"","code":"# chi_check returns specific feedback on why a CHI number might be invalid library(dplyr) chi_data <- tibble(chi = c(\"0101011237\", \"0101336489\", \"3213201234\", \"123456789\", \"12345678900\", \"010120123?\", NA)) chi_data %>%    mutate(validity = chi_check(chi)) #> # A tibble: 7 Ã— 2 #>   chi         validity                     #>   <chr>       <chr>                        #> 1 0101011237  Valid CHI                    #> 2 0101336489  Valid CHI                    #> 3 3213201234  Invalid date                 #> 4 123456789   Too few characters           #> 5 12345678900 Too many characters          #> 6 010120123?  Invalid character(s) present #> 7 <NA>        Missing (NA)"},{"path":"/index.html","id":"chi_pad","dir":"","previous_headings":"Using phsmethods","what":"chi_pad","title":"Standard Methods for use in Public Health Scotland","text":"","code":"chi_numbers <- c(\"101011237\", \"101201234\", \"123223\", \"abcdefghi\", \"12345tuvw\") # Only nine-digit characters comprised exclusively of numeric digits are prefixed with a zero chi_pad(chi_numbers) #> [1] \"0101011237\" \"0101201234\" \"123223\"     \"abcdefghi\"  \"12345tuvw\""},{"path":"/index.html","id":"sex_from_chi","dir":"","previous_headings":"Using phsmethods","what":"sex_from_chi","title":"Standard Methods for use in Public Health Scotland","text":"","code":"# By default it will check that the CHI is valid before extracting the sex. library(dplyr) chi_data <- tibble(chi = c(\"0101011237\", \"0101336489\", \"123456789\", \"12345678900\", \"010120123?\", NA))  chi_data %>%    mutate(chi_sex = sex_from_chi(chi)) #> # A tibble: 6 Ã— 2 #>   chi         chi_sex #>   <chr>         <int> #> 1 0101011237        1 #> 2 0101336489        2 #> 3 123456789        NA #> 4 12345678900      NA #> 5 010120123?       NA #> 6 <NA>             NA  # Use custom values for male and female chi_data %>%    mutate(chi_sex = sex_from_chi(chi, male_value = \"M\", female_value = \"F\")) #> Using custom values: Male = M Female = F. #> The return variable will be character. #> # A tibble: 6 Ã— 2 #>   chi         chi_sex #>   <chr>       <chr>   #> 1 0101011237  M       #> 2 0101336489  F       #> 3 123456789   <NA>    #> 4 12345678900 <NA>    #> 5 010120123?  <NA>    #> 6 <NA>        <NA>  # Alternatively return the result as a factor (with labels 'Male' and 'Female') chi_data %>%    mutate(chi_sex = sex_from_chi(chi, as_factor = TRUE)) #> # A tibble: 6 Ã— 2 #>   chi         chi_sex #>   <chr>       <fct>   #> 1 0101011237  Male    #> 2 0101336489  Female  #> 3 123456789   <NA>    #> 4 12345678900 <NA>    #> 5 010120123?  <NA>    #> 6 <NA>        <NA>"},{"path":"/index.html","id":"file_size","dir":"","previous_headings":"Using phsmethods","what":"file_size","title":"Standard Methods for use in Public Health Scotland","text":"","code":"# Names and sizes of all files in the tests/testthat/files folder file_size(testthat::test_path(\"files\")) #> # A tibble: 8 Ã— 2 #>   name             size        #>   <chr>            <chr>       #> 1 airquality.xls   Excel 26 KB #> 2 bod.xlsx         Excel 5 KB  #> 3 iris.csv         CSV 4 KB    #> 4 mtcars.sav       SPSS 4 KB   #> 5 plant-growth.rds RDS 316 B   #> 6 puromycin.txt    Text 418 B  #> 7 stackloss.fst    FST 897 B   #> 8 swiss.tsv        TSV 1 KB  # Names and sizes of Excel files only in the tests/testthat/files folder file_size(testthat::test_path(\"files\"), pattern = \"\\\\.xlsx?$\") #> # A tibble: 2 Ã— 2 #>   name           size        #>   <chr>          <chr>       #> 1 airquality.xls Excel 26 KB #> 2 bod.xlsx       Excel 5 KB"},{"path":"/index.html","id":"extract_fin_year","dir":"","previous_headings":"Using phsmethods","what":"extract_fin_year","title":"Standard Methods for use in Public Health Scotland","text":"","code":"dates <- lubridate::dmy(c(21012017, 04042017, 17112017)) extract_fin_year(dates) #> [1] \"2016/17\" \"2017/18\" \"2017/18\""},{"path":"/index.html","id":"match_area","dir":"","previous_headings":"Using phsmethods","what":"match_area","title":"Standard Methods for use in Public Health Scotland","text":"","code":"match_area(\"S13002781\") #> [1] \"Ayr North\"  geog_data <- tibble(code = c(\"S02000656\", \"S02001042\", \"S08000020\", \"S12000013\", \"S13002605\")) geog_data %>%    mutate(name = match_area(code)) #> # A tibble: 5 Ã— 2 #>   code      name                #>   <chr>     <chr>               #> 1 S02000656 Govan and Linthouse #> 2 S02001042 Peebles North       #> 3 S08000020 Grampian            #> 4 S12000013 Na h-Eileanan Siar  #> 5 S13002605 SteÃ²rnabhagh a Deas"},{"path":"/index.html","id":"format_postcode","dir":"","previous_headings":"Using phsmethods","what":"format_postcode","title":"Standard Methods for use in Public Health Scotland","text":"","code":"# The default is pc7 format format_postcode(\"G26QE\") #> [1] \"G2  6QE\"  # But pc8 format can also be applied format_postcode(c(\"KA89NB\", \"PA152TY\"), format = \"pc8\") #> [1] \"KA8 9NB\"  \"PA15 2TY\"  # postcode accounts for irregular spacing and lower case letters postcode_data <- tibble(postcode = c(\"G 4 2 9 B A\", \"g207al\", \"Dg98bS\", \"DD37J    y\")) postcode_data %>%    mutate(postcode = format_postcode(postcode)) #> # A tibble: 4 Ã— 1 #>   postcode #>   <chr>    #> 1 G42 9BA  #> 2 G20 7AL  #> 3 DG9 8BS  #> 4 DD3 7JY"},{"path":"/index.html","id":"qtr-qtr_end-qtr_next-and-qtr_prev","dir":"","previous_headings":"Using phsmethods","what":"qtr, qtr_end, qtr_next and qtr_prev","title":"Standard Methods for use in Public Health Scotland","text":"","code":"dates <- lubridate::dmy(c(26032012, 04052012, 23092012))  # qtr returns the current quarter and year # The default is long format qtr(dates) #> [1] \"January to March 2012\"  \"April to June 2012\"     \"July to September 2012\"  # But short format can also be applied qtr(dates, format = \"short\") #> [1] \"Jan-Mar 2012\" \"Apr-Jun 2012\" \"Jul-Sep 2012\"   # qtr_end returns the last month in the quarter qtr_end(dates) #> [1] \"March 2012\"     \"June 2012\"      \"September 2012\" qtr_end(dates, format = \"short\") #> [1] \"Mar 2012\" \"Jun 2012\" \"Sep 2012\"   # qtr_next returns the next quarter qtr_next(dates) #> [1] \"April to June 2012\"       \"July to September 2012\"   #> [3] \"October to December 2012\" qtr_next(dates, format = \"short\") #> [1] \"Apr-Jun 2012\" \"Jul-Sep 2012\" \"Oct-Dec 2012\"   # qtr_prev returns the previous quarter qtr_prev(dates) #> [1] \"October to December 2011\" \"January to March 2012\"    #> [3] \"April to June 2012\" qtr_prev(dates, format = \"short\") #> [1] \"Oct-Dec 2011\" \"Jan-Mar 2012\" \"Apr-Jun 2012\""},{"path":"/index.html","id":"age_calculate","dir":"","previous_headings":"Using phsmethods","what":"age_calculate","title":"Standard Methods for use in Public Health Scotland","text":"","code":"birth_date <- lubridate::ymd(\"2020-02-29\") end_date <- lubridate::ymd(\"2022-02-21\")  age_calculate(birth_date, end_date) #> [1] 1 age_calculate(birth_date, end_date, units = \"months\") #> [1] 23  # If the start day is leap day (February 29th), age increases on 1st March every year.  leap1 <- lubridate::ymd(\"2020-02-29\") leap2 <- lubridate::ymd(\"2022-02-28\") leap3 <- lubridate::ymd(\"2022-03-01\")  age_calculate(leap1, leap2) #> [1] 1 age_calculate(leap1, leap3) #> [1] 2"},{"path":"/index.html","id":"dob_from_chi","dir":"","previous_headings":"Using phsmethods","what":"dob_from_chi","title":"Standard Methods for use in Public Health Scotland","text":"","code":"dob_from_chi(\"0101336489\") #> [1] \"1933-01-01\"  library(tibble) library(dplyr) data <- tibble(chi = c(  \"0101336489\",  \"0101405073\",  \"0101625707\" ), adm_date = as.Date(c(  \"1950-01-01\",  \"2000-01-01\",  \"2020-01-01\" )))  data %>%  mutate(chi_dob = dob_from_chi(chi)) #> # A tibble: 3 Ã— 3 #>   chi        adm_date   chi_dob    #>   <chr>      <date>     <date>     #> 1 0101336489 1950-01-01 1933-01-01 #> 2 0101405073 2000-01-01 1940-01-01 #> 3 0101625707 2020-01-01 1962-01-01  data %>%  mutate(chi_dob = dob_from_chi(chi,    min_date = as.Date(\"1930-01-01\"),    max_date = adm_date  )) #> # A tibble: 3 Ã— 3 #>   chi        adm_date   chi_dob    #>   <chr>      <date>     <date>     #> 1 0101336489 1950-01-01 1933-01-01 #> 2 0101405073 2000-01-01 1940-01-01 #> 3 0101625707 2020-01-01 1962-01-01"},{"path":"/index.html","id":"age_from_chi","dir":"","previous_headings":"Using phsmethods","what":"age_from_chi","title":"Standard Methods for use in Public Health Scotland","text":"","code":"age_from_chi(\"0101336489\") #> [1] 89  library(tibble) library(dplyr) data <- tibble(chi = c(  \"0101336489\",  \"0101405073\",  \"0101625707\" ), dis_date = as.Date(c(  \"1950-01-01\",  \"2000-01-01\",  \"2020-01-01\" )))  data %>%  mutate(chi_age = age_from_chi(chi)) #> # A tibble: 3 Ã— 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      89 #> 2 0101405073 2000-01-01      82 #> 3 0101625707 2020-01-01      60  data %>%  mutate(chi_age = age_from_chi(chi, min_age = 18, max_age = 65)) #> 2 CHI numbers produced ambiguous dates and will be given NA for DoB, if possible try different values for min_date and/or max_date #> # A tibble: 3 Ã— 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      NA #> 2 0101405073 2000-01-01      NA #> 3 0101625707 2020-01-01      60  data %>%  mutate(chi_age = age_from_chi(chi,    ref_date = dis_date  )) #> # A tibble: 3 Ã— 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      17 #> 2 0101405073 2000-01-01      60 #> 3 0101625707 2020-01-01      58"},{"path":"/index.html","id":"contributing-to-phsmethods","dir":"","previous_headings":"","what":"Contributing to phsmethods","title":"Standard Methods for use in Public Health Scotland","text":"present, maintainer package Tina Fu. package intended continuous development contributions may made anyone within PHS. like contribute, please first create issue GitHub assign package maintainers . ensure duplication effort occurs case multiple people idea. package maintainers discuss issue get back soon possible. obvious eye-catching (well intimidating) way contributing writing function, isn’t way make useful contribution. Fixing typos documentation, example, isn’t glamorous way contribute, great help package maintainers. Please see blog post Jim Hester information getting started contributing open-source software. contributing, please create branch repository carry work . Please ensure linked RStudio GitHub account using usethis::edit_git_config() prior making contribution. ready review, please create pull request assign package maintainers reviewers. One conduct review, provide feedback , necessary, request changes merging branch. Please mindful information governance contributing package. data files (aside publicly available downloadable datasets unless explicitly approved), server connection details, passwords person identifiable otherwise confidential information included anywhere within package repository (whether public private) used within PHS. includes within code code commentary. information security using git GitHub, using git GitHub version control generally, please see Transforming Publishing Programme’s Git guide GitHub guidance. Please feel free add ‘Authors’ section Description file contributing. rule thumb, please assign role author (\"aut\") writing exported function, contributor (\"ctb\") anything else. phsmethods , much possible, adhere tidyverse style guide rOpenSci package development guide. pertinent points take : function names lower case, words separated underscore Put space comma, never Put space infix operators <-, == + Limit code 80 characters per line Function documentation generated using roxygen2 functions tested using testthat package always pass devtools::check() ’s necessary experience GitHub building R package contribute phsmethods. wish contribute code , long can write R function, package maintainers can assist error handling, writing documentation, testing aspects package development. advised, however, consult Hadley Wickham’s R Packages book prior making contribution. may also useful consult documentation tests existing functions within package point reference. Please note README may fail ‘Knit’ times result network security settings. likely due badges package’s release version, continuous integration status test coverage top document. make edits .Rmd version, can knit , GitHub action run knit open pull request.","code":""},{"path":"/reference/age_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate age between two dates — age_calculate","title":"Calculate age between two dates — age_calculate","text":"function calculates age two dates using `lubridate`. calculates age either years months.","code":""},{"path":"/reference/age_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate age between two dates — age_calculate","text":"","code":"age_calculate(   start,   end = if (lubridate::is.Date(start)) Sys.Date() else Sys.time(),   units = c(\"years\", \"months\"),   round_down = TRUE )"},{"path":"/reference/age_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate age between two dates — age_calculate","text":"start start date (e.g. date birth) must supplied Date POSIXct POSIXlt class. .Date(), lubridate::dmy() .POSIXct() examples functions can used store dates appropriate class. end end date must supplied Date POSIXct POSIXlt class. Default `Sys.Date()` `Sys.time()` depending class `start`. units Type units used. years months accepted. Default years. round_down returned ages rounded nearest whole number. Default TRUE.","code":""},{"path":"/reference/age_calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate age between two dates — age_calculate","text":"","code":"if (FALSE) { library(phsmethods) library(lubridate) my_date <- ymd(\"2020-02-29\") end_date <- today() age_calculate(my_date, end_date) age_calculate(my_date, end_date, round_down = FALSE) age_calculate(my_date, end_date, units = \"months\")  # It's worth noting that `lubridate` periods classify leap year birthdays # slightly differently to UK law where (in the UK) legally speaking # leaplings become a year older on the 1st March on non-leap years. leap1 <- dmy(\"29-02-2020\") leap2 <- dmy(\"28-02-2022\") leap3 <- dmy(\"01-03-2022\") age_calculate(leap1, leap2) age_calculate(leap1, leap3) }"},{"path":"/reference/age_from_chi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract age from the CHI number — age_from_chi","title":"Extract age from the CHI number — age_from_chi","text":"age_from_chi takes CHI number vector CHI numbers returns age implied CHI number(s). DoB ambiguous return NA. uses dob_from_chi.","code":""},{"path":"/reference/age_from_chi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract age from the CHI number — age_from_chi","text":"","code":"age_from_chi(   chi_number,   ref_date = NULL,   min_age = 0,   max_age = NULL,   chi_check = TRUE )"},{"path":"/reference/age_from_chi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract age from the CHI number — age_from_chi","text":"chi_number CHI number vector CHI numbers character class. ref_date calculate age date, default use Sys.Date() .e. today. min_age, max_age optional min /max dates Date Birth take century needs guessed. Must either length 1 'fixed' age length chi_number age per CHI number. min_age can age based common sense dataset, whilst max_age can age event happens age discharge. chi_check logical, optionally skip checking CHI validity faster used previously checked CHI(s), default (TRUE) check CHI numbers.","code":""},{"path":"/reference/age_from_chi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract age from the CHI number — age_from_chi","text":"integer vector ages years truncated nearest year. length chi_number.","code":""},{"path":"/reference/age_from_chi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract age from the CHI number — age_from_chi","text":"","code":"age_from_chi(\"0101336489\") #> [1] 89  library(tibble) #> Warning: package 'tibble' was built under R version 3.6.3 library(dplyr) #> Warning: package 'dplyr' was built under R version 3.6.3 #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data <- tibble(chi = c(   \"0101336489\",   \"0101405073\",   \"0101625707\" ), dis_date = as.Date(c(   \"1950-01-01\",   \"2000-01-01\",   \"2020-01-01\" )))  data %>%   mutate(chi_age = age_from_chi(chi)) #> # A tibble: 3 x 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      89 #> 2 0101405073 2000-01-01      82 #> 3 0101625707 2020-01-01      60  data %>%   mutate(chi_age = age_from_chi(chi, min_age = 18, max_age = 65)) #> 2 CHI numbers produced ambiguous dates and will be given NA for DoB, if possible try different values for min_date and/or max_date #> # A tibble: 3 x 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      NA #> 2 0101405073 2000-01-01      NA #> 3 0101625707 2020-01-01      60  data %>%   mutate(chi_age = age_from_chi(chi,     ref_date = dis_date   )) #> # A tibble: 3 x 3 #>   chi        dis_date   chi_age #>   <chr>      <date>       <dbl> #> 1 0101336489 1950-01-01      17 #> 2 0101405073 2000-01-01      60 #> 3 0101625707 2020-01-01      58"},{"path":"/reference/area_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Codes and names of Scottish geographical and administrative areas. — area_lookup","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"dataset containing Scotland's geography codes associated area names. used within match_area.","code":""},{"path":"/reference/area_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"","code":"area_lookup"},{"path":"/reference/area_lookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"tibble 2 variables 17,000 rows: geo_code Standard geography code - 9 characters area_name Name area code represents","code":""},{"path":"/reference/area_lookup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"https://statistics.gov.scot/","code":""},{"path":"/reference/area_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Codes and names of Scottish geographical and administrative areas. — area_lookup","text":"geo_code contains geography codes pertaining Health Boards, Council Areas, Health Social Care Partnerships, Intermediate Zones, Data Zones (2001 2011), Electoral Wards, Scottish Parliamentary Constituencies, UK Parliamentary Constituencies, Travel work areas, National Parks, Community Health Partnerships, Localities (S19), Settlements (S20) Scotland.","code":""},{"path":[]},{"path":"/reference/chi_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of a CHI number — chi_check","title":"Check the validity of a CHI number — chi_check","text":"chi_check takes CHI number vector CHI numbers character class. returns feedback validity entered CHI number , found invalid, provides explanation .","code":""},{"path":"/reference/chi_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of a CHI number — chi_check","text":"","code":"chi_check(x)"},{"path":"/reference/chi_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of a CHI number — chi_check","text":"x CHI number vector CHI numbers character class.","code":""},{"path":"/reference/chi_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of a CHI number — chi_check","text":"chi_check returns character string. Depending validity entered CHI number, return one following: `Valid CHI` `Invalid character(s) present` `many characters` `characters` `Invalid date` `Invalid checksum` `Missing (NA)` `Missing (Blank)`","code":""},{"path":"/reference/chi_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the validity of a CHI number — chi_check","text":"Community Health Index (CHI) register patients NHS Scotland. CHI number unique, ten-digit identifier assigned patient index. first six digits CHI number patient's date birth DD/MM/YY format. ninth digit CHI number identifies patient's sex: odd male, even female. tenth digit check digit, denoted `checksum`. CHI number made exclusively numeric digits, stored numeric class R. leading zeros numeric values silently dropped, practice exclusive R. reason, chi_check accepts input values character class . leading zero can added nine-digit CHI number using chi_pad. chi_check assesses whether entered CHI number valid checking whether answer following criteria `Yes`: contain non-numeric characters? ten digits length? first six digits denote valid date? checksum digit correct?","code":""},{"path":"/reference/chi_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of a CHI number — chi_check","text":"","code":"chi_check(\"0101011237\") #> [1] \"Valid CHI\" chi_check(c(\"0101201234\", \"3201201234\")) #> [1] \"Invalid checksum\" \"Invalid date\"      library(dplyr) df <- tibble(chi = c(\"3213201234\", \"123456789\", \"12345678900\", \"010120123?\", NA)) df %>%   mutate(validity = chi_check(chi)) #> # A tibble: 5 x 2 #>   chi         validity                     #>   <chr>       <chr>                        #> 1 3213201234  Invalid date                 #> 2 123456789   Too few characters           #> 3 12345678900 Too many characters          #> 4 010120123?  Invalid character(s) present #> 5 NA          Missing (NA)"},{"path":"/reference/chi_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a leading zero to nine-digit CHI numbers — chi_pad","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"chi_pad takes nine-digit CHI number character class prefixes zero. values provided string comprised nine numeric digits remain unchanged.","code":""},{"path":"/reference/chi_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"","code":"chi_pad(x)"},{"path":"/reference/chi_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"x CHI number vector CHI numbers character class.","code":""},{"path":"/reference/chi_pad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"Community Health Index (CHI) register patients NHS Scotland. CHI number unique, ten-digit identifier assigned patient index. first six digits CHI number patient's date birth DD/MM/YY format. first digit CHI number must, therefore, 3 less. Depending source, CHI numbers sometimes missing leading zero. CHI number made exclusively numeric digits, stored numeric class R. leading zeros numeric values silently dropped, practice exclusive R. reason, chi_pad accepts input values character class , returns values class. assess validity CHI number - please see chi_check .","code":""},{"path":"/reference/chi_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a leading zero to nine-digit CHI numbers — chi_pad","text":"","code":"chi_pad(c(\"101011237\", \"101201234\")) #> [1] \"0101011237\" \"0101201234\""},{"path":"/reference/create_age_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Create age groups — create_age_groups","title":"Create age groups — create_age_groups","text":"create_age_groups() takes numeric vector assigns age appropriate age group.","code":""},{"path":"/reference/create_age_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create age groups — create_age_groups","text":"","code":"create_age_groups(x, from = 0, to = 90, by = 5, as_factor = FALSE)"},{"path":"/reference/create_age_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create age groups — create_age_groups","text":"x vector numeric values start smallest age group. default 0. end point age groups. default 90. size age groups. default 5. as_factor default behaviour return character vector. Use TRUE return factor vector instead.","code":""},{"path":"/reference/create_age_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create age groups — create_age_groups","text":"character vector, element age group corresponding element x. as_factor = TRUE, factor vector returned instead.","code":""},{"path":"/reference/create_age_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create age groups — create_age_groups","text":", values used create distinct age groups. dictates starting age lowest age group, indicates wide group . stipulates cut-point ages equal greater value categorised together + group. specified value multiple , value rounded nearest multiple . default values , correspond European Standard Population age groups.","code":""},{"path":"/reference/create_age_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create age groups — create_age_groups","text":"","code":"age <- c(54, 7, 77, 1, 26, 101)  create_age_groups(age) #> [1] \"50-54\" \"5-9\"   \"75-79\" \"0-4\"   \"25-29\" \"90+\"   create_age_groups(age, from = 0, to = 80, by = 10) #> [1] \"50-59\" \"0-9\"   \"70-79\" \"0-9\"   \"20-29\" \"80+\"    # Final group may start below 'to' create_age_groups(age, from = 0, to = 65, by = 10) #> [1] \"50-59\" \"0-9\"   \"60+\"   \"0-9\"   \"20-29\" \"60+\"    # To get the output as a factor: create_age_groups(age, as_factor = TRUE) #> [1] 50-54 5-9   75-79 0-4   25-29 90+   #> 19 Levels: 0-4 < 5-9 < 10-14 < 15-19 < 20-24 < 25-29 < 30-34 < ... < 90+"},{"path":"/reference/dob_from_chi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"dob_from_chi takes CHI number vector CHI numbers returns DoB implied CHI number(s). DoB ambiguous return NA","code":""},{"path":"/reference/dob_from_chi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"","code":"dob_from_chi(chi_number, min_date = NULL, max_date = NULL, chi_check = TRUE)"},{"path":"/reference/dob_from_chi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"chi_number CHI number vector CHI numbers character class. min_date, max_date optional min /max dates Date Birth take century needs guessed. Must either length 1 'fixed' date length chi_number date per CHI number. min_date can date based common sense dataset, whilst max_date can date event happens discharge date. chi_check logical, optionally skip checking CHI validity faster used previously checked CHI(s). default (TRUE) check CHI numbers.","code":""},{"path":"/reference/dob_from_chi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"date vector DoB. length chi_number.","code":""},{"path":"/reference/dob_from_chi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Date of Birth (DoB) from the CHI number — dob_from_chi","text":"","code":"dob_from_chi(\"0101336489\") #> [1] \"1933-01-01\"  library(tibble) library(dplyr) data <- tibble(chi = c(   \"0101336489\",   \"0101405073\",   \"0101625707\" ), adm_date = as.Date(c(   \"1950-01-01\",   \"2000-01-01\",   \"2020-01-01\" )))  data %>%   mutate(chi_dob = dob_from_chi(chi)) #> # A tibble: 3 x 3 #>   chi        adm_date   chi_dob    #>   <chr>      <date>     <date>     #> 1 0101336489 1950-01-01 1933-01-01 #> 2 0101405073 2000-01-01 1940-01-01 #> 3 0101625707 2020-01-01 1962-01-01  data %>%   mutate(chi_dob = dob_from_chi(chi,     min_date = as.Date(\"1930-01-01\"),     max_date = adm_date   )) #> # A tibble: 3 x 3 #>   chi        adm_date   chi_dob    #>   <chr>      <date>     <date>     #> 1 0101336489 1950-01-01 1933-01-01 #> 2 0101405073 2000-01-01 1940-01-01 #> 3 0101625707 2020-01-01 1962-01-01"},{"path":"/reference/extract_fin_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a date to a financial year — extract_fin_year","title":"Assign a date to a financial year — extract_fin_year","text":"extract_fin_year takes date assigns correct financial year PHS specified format.","code":""},{"path":"/reference/extract_fin_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a date to a financial year — extract_fin_year","text":"","code":"extract_fin_year(date)"},{"path":"/reference/extract_fin_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a date to a financial year — extract_fin_year","text":"date date must supplied Date POSIXct class. .Date(), lubridate::dmy() .POSIXct() examples functions can used store dates appropriate class.","code":""},{"path":"/reference/extract_fin_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign a date to a financial year — extract_fin_year","text":"PHS accepted format financial year YYYY/YY e.g. 2017/18.","code":""},{"path":"/reference/extract_fin_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a date to a financial year — extract_fin_year","text":"","code":"x <- lubridate::dmy(c(21012017, 04042017, 17112017)) extract_fin_year(x) #> [1] \"2016/17\" \"2017/18\" \"2017/18\""},{"path":"/reference/file_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate file size — file_size","title":"Calculate file size — file_size","text":"file_size takes filepath optional regular expression pattern. returns size files within directory match given pattern.","code":""},{"path":"/reference/file_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate file size — file_size","text":"","code":"file_size(filepath = getwd(), pattern = NULL)"},{"path":"/reference/file_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate file size — file_size","text":"filepath character string denoting filepath. Defaults working directory, getwd(). pattern optional character string denoting regular expression pattern. file names match regular expression returned. See See Also section resources regarding write regular expressions.","code":""},{"path":"/reference/file_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate file size — file_size","text":"tibble listing names files within filepath match pattern respective sizes. column names tibble `name` `size`. pattern specified, file_size returns names sizes files within filepath. File names sizes returned alphabetical order file name. Sub-folders contained within filepath return file size `0 B`. filepath empty folder, pattern matches files within filepath, file_size returns NULL.","code":""},{"path":"/reference/file_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate file size — file_size","text":"sizes files certain extensions returned type file prefixed. example, size 12 KB .xlsx file returned `Excel 12 KB`. complete list explicitly catered-file extensions prefixes follows: .xls, .xlsb, .xlsm .xlsx files prefixed `Excel` .csv files prefixed `CSV` .sav .zsav files prefixed `SPSS` .doc, .docm .docx files prefixed `Word` .rds files prefixed `RDS` .txt files prefixed `Text`, .fst files prefixed `FST`, .pdf files prefixed `PDF`, .tsv files prefixed `TSV`, .html files prefixed `HTML`, .ppt, .pptm .pptx files prefixed `PowerPoint`, .md files prefixed `Markdown` Files extensions contained within list size returned prefix. request certain extension explicitly catered , please create issue GitHub. File sizes returned appropriate multiple unit byte (bytes (B), kilobytes (KB), megabytes (MB), etc.). multiple taken 1,024 units preceding denomination.","code":""},{"path":[]},{"path":"/reference/file_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate file size — file_size","text":"","code":"# Name and size of all files in working directory file_size() #> # A tibble: 18 x 2 #>    name                   size       #>    <chr>                  <chr>      #>  1 Rplot001.png           1011 B     #>  2 age_calculate.html     HTML 12 KB #>  3 age_from_chi.html      HTML 16 KB #>  4 area_lookup.html       HTML 8 KB  #>  5 chi_check.html         HTML 12 KB #>  6 chi_pad.html           HTML 9 KB  #>  7 create_age_groups.html HTML 11 KB #>  8 dob_from_chi.html      HTML 13 KB #>  9 extract_fin_year.html  HTML 8 KB  #> 10 figures                0 B        #> 11 file_size.html         HTML 15 KB #> 12 format_postcode.html   HTML 13 KB #> 13 index.html             HTML 8 KB  #> 14 match_area.html        HTML 12 KB #> 15 phsmethods.html        HTML 6 KB  #> 16 qtr.html               HTML 11 KB #> 17 rename.html            HTML 8 KB  #> 18 sex_from_chi.html      HTML 13 KB  # Name and size of .xlsx files only in working directory file_size(pattern = \"\\\\.xlsx$\") #> NULL  # Size only of alphabetically first file in working directory library(magrittr) #> Warning: package 'magrittr' was built under R version 3.6.3 file_size() %>% dplyr::pull(size) %>% extract(1) #> [1] \"1011 B\""},{"path":"/reference/format_postcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a postcode — format_postcode","title":"Format a postcode — format_postcode","text":"format_postcode takes character string vector character strings. extracts input values adhere standard UK postcode format (without spaces), assigns appropriate amount spacing (pc7 pc8 formats) ensures letters capitalised.","code":""},{"path":"/reference/format_postcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a postcode — format_postcode","text":"","code":"format_postcode(x, format = c(\"pc7\", \"pc8\"))"},{"path":"/reference/format_postcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a postcode — format_postcode","text":"x character string vector character strings. Input values adhere standard UK postcode format may upper lower case formatted regardless existing spacing. input values adhere standard UK postcode format generate NA warning message - see Value section information. format character string denoting desired output format. Valid options `pc7` `pc8`. default `pc7`. See Value section information string length output values.","code":""},{"path":"/reference/format_postcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a postcode — format_postcode","text":"format set equal pc7, format_postcodereturns character string length 7. 5 character postcodes two spaces 2nd character; 6 character postcodes 1 space 3rd character; 7 character postcodes spaces. format set equal pc8, format_postcode returns character string maximum length 8. postcodes, whether 5, 6 7 characters, one space last 3 characters. input values adhere standard UK postcode format generate NA output value warning message. warning generated rather error let one erroneously recorded postcode large input vector prevent remaining entries appropriately formatted. input values adhere standard UK postcode format contain lower case letters generate warning message explaining letters capitalised.","code":""},{"path":"/reference/format_postcode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format a postcode — format_postcode","text":"standard UK postcode format (without spaces) : 1 2 letters, followed 1 number, followed 1 optional letter number, followed 1 number, followed 2 letters UK government regulations mandate letters numbers can used specific sections postcode. However, regulations liable change time. reason, format_postcode validate whether given postcode actually exists, whether specific numbers letters used appropriate places. assesses whether given input consistent format , , assigns appropriate amount spacing capitalises lower case letters.","code":""},{"path":"/reference/format_postcode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a postcode — format_postcode","text":"","code":"format_postcode(\"G26QE\") #> [1] \"G2  6QE\" format_postcode(c(\"KA89NB\", \"PA152TY\"), format = \"pc8\") #> [1] \"KA8 9NB\"  \"PA15 2TY\"  library(dplyr) df <- tibble(postcode = c(\"G429BA\", \"G207AL\", \"DD37JY\", \"DG98BS\")) df %>% mutate(postcode = format_postcode(postcode)) #> # A tibble: 4 x 1 #>   postcode #>   <chr>    #> 1 G42 9BA  #> 2 G20 7AL  #> 3 DD3 7JY  #> 4 DG9 8BS"},{"path":"/reference/match_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate geography codes into area names — match_area","title":"Translate geography codes into area names — match_area","text":"match_area takes geography code vector geography codes. matches input corresponding value area_lookup dataset returns corresponding area name.","code":""},{"path":"/reference/match_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate geography codes into area names — match_area","text":"","code":"match_area(x)"},{"path":"/reference/match_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate geography codes into area names — match_area","text":"x geography code vector geography codes.","code":""},{"path":"/reference/match_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate geography codes into area names — match_area","text":"geography code within Scotland unique, consequently match_area returns single area name input value. input value without corresponding value area_lookup dataset return NA output value.","code":""},{"path":"/reference/match_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate geography codes into area names — match_area","text":"match_area relies predominantly standard 9 digit geography codes. exceptions : RA2701: Fixed Abode RA2702: Rest UK (Outside Scotland) RA2703: Outside UK RA2704: Unknown Residency match_area caters current previous versions geography codes (e.g 2014 2019 Health Boards). can account geography codes pertaining Health Boards, Council Areas, Health Social Care Partnerships, Intermediate Zones, Data Zones (2001 2011), Electoral Wards, Scottish Parliamentary Constituencies, UK Parliamentary Constituencies, Travel work areas, National Parks, Community Health Partnerships, Localities (S19), Settlements (S20) Scotland. match_area returns non-NA value exact match present input value corresponding variable area_lookup dataset. exact matches sensitive case spacing. advised inspect area_lookup case unexpected results, may explained subtle differences transcription input value corresponding value lookup dataset.","code":""},{"path":"/reference/match_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate geography codes into area names — match_area","text":"","code":"match_area(\"S20000010\") #> [1] \"Eaglesham\"  library(dplyr) df <- tibble(code = c(\"S02000656\", \"S02001042\", \"S08000020\", \"S12000013\")) df %>% mutate(name = match_area(code)) #> # A tibble: 4 x 2 #>   code      name                #>   <chr>     <chr>               #> 1 S02000656 Govan and Linthouse #> 2 S02001042 Peebles North       #> 3 S08000020 Grampian            #> 4 S12000013 Na h-Eileanan Siar"},{"path":"/reference/phsmethods.html","id":null,"dir":"Reference","previous_headings":"","what":"phsmethods package — phsmethods","title":"phsmethods package — phsmethods","text":"Standard Methods use PHS.","code":""},{"path":"/reference/phsmethods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phsmethods package — phsmethods","text":"See README GitHub.","code":""},{"path":"/reference/qtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a date to a quarter — qtr","title":"Assign a date to a quarter — qtr","text":"qtr functions take date input calculate relevant quarter-related value . return year part value. qtr returns current quarter qtr_end returns last month quarter qtr_next returns next quarter qtr_prev returns previous quarter","code":""},{"path":"/reference/qtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a date to a quarter — qtr","text":"","code":"qtr(date, format = c(\"long\", \"short\"))  qtr_end(date, format = c(\"long\", \"short\"))  qtr_next(date, format = c(\"long\", \"short\"))  qtr_prev(date, format = c(\"long\", \"short\"))"},{"path":"/reference/qtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a date to a quarter — qtr","text":"date date must supplied Date POSIXct format character string specifying format quarter displayed . Valid options `long` (January March 2018) `short` (Jan-Mar 2018). default `long`.","code":""},{"path":"/reference/qtr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign a date to a quarter — qtr","text":"Quarters defined : January March (Jan-Mar) April June (Apr-Jun) July September (Jul-Sep) October December (Oct-Dec)","code":""},{"path":"/reference/qtr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a date to a quarter — qtr","text":"","code":"x <- lubridate::dmy(c(26032012, 04052012, 23092012)) qtr(x) #> [1] \"January to March 2012\"  \"April to June 2012\"     \"July to September 2012\" qtr_end(x, format = \"short\") #> [1] \"Mar 2012\" \"Jun 2012\" \"Sep 2012\" qtr_next(x) #> [1] \"April to June 2012\"       \"July to September 2012\"   #> [3] \"October to December 2012\" qtr_prev(x, format = \"short\") #> [1] \"Oct-Dec 2011\" \"Jan-Mar 2012\" \"Apr-Jun 2012\""},{"path":"/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions renamed in phsmethods 0.2.1 (Dec 2021) — rename","title":"Functions renamed in phsmethods 0.2.1 (Dec 2021) — rename","text":"phsmethods 0.2.1 renamed number functions improve code clarity. old functions still work produce warning. reasonable amount time removed completely. postcode() -> format_postcode() age_group() -> create_age_groups() fin_year() -> extract_fin_year()","code":""},{"path":"/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions renamed in phsmethods 0.2.1 (Dec 2021) — rename","text":"","code":"postcode(x, format = c(\"pc7\", \"pc8\"))  age_group(x, from = 0, to = 90, by = 5, as_factor = FALSE)  fin_year(date)"},{"path":"/reference/sex_from_chi.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract sex from the CHI number — sex_from_chi","title":"Extract sex from the CHI number — sex_from_chi","text":"sex_from_chi takes CHI number vector CHI numbers returns sex implied CHI number(s). default return type integer can modified.","code":""},{"path":"/reference/sex_from_chi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract sex from the CHI number — sex_from_chi","text":"","code":"sex_from_chi(   chi_number,   male_value = 1L,   female_value = 2L,   as_factor = FALSE,   chi_check = TRUE )"},{"path":"/reference/sex_from_chi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract sex from the CHI number — sex_from_chi","text":"chi_number CHI number vector CHI numbers character class. male_value, female_value optionally supply custom values Male Female. Note must class. as_factor logical, optionally return factor labels 'Male' 'Female'. Note override custom values supplied male_value female_value. chi_check logical, optionally skip checking CHI validity faster used previously checked CHI(s).","code":""},{"path":"/reference/sex_from_chi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract sex from the CHI number — sex_from_chi","text":"vector class male_value female_value, (integer default) unless as_factor TRUE case factor returned.","code":""},{"path":"/reference/sex_from_chi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract sex from the CHI number — sex_from_chi","text":"Community Health Index (CHI) register patients NHS Scotland. CHI number unique, ten-digit identifier assigned patient index. ninth digit CHI number identifies patient's sex: odd men, even women. default behaviour sex_from_chi first check CHI number valid using check_chi return 1 male 2 female. options return custom values e.g. 'M' 'F' return factor labels 'Male' 'Female')","code":""},{"path":"/reference/sex_from_chi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract sex from the CHI number — sex_from_chi","text":"","code":"sex_from_chi(\"0101011237\") #> [1] 1 sex_from_chi(c(\"0101011237\", \"0101336489\", NA)) #> [1]  1  2 NA sex_from_chi(c(\"0101011237\", \"0101336489\", NA), male_value = \"M\", female_value = \"F\") #> Using custom values: Male = M Female = F. #> The return variable will be character. #> [1] \"M\" \"F\" NA  sex_from_chi(c(\"0101011237\", \"0101336489\", NA), as_factor = TRUE) #> [1] Male   Female <NA>   #> Levels: Male Female  library(dplyr) df <- tibble(chi = c(\"0101011237\", \"0101336489\", NA)) df %>% mutate(chi_sex = sex_from_chi(chi)) #> # A tibble: 3 x 2 #>   chi        chi_sex #>   <chr>        <int> #> 1 0101011237       1 #> 2 0101336489       2 #> 3 NA              NA"},{"path":"/news/index.html","id":"phsmethods-021-2022-02-11","dir":"Changelog","previous_headings":"","what":"phsmethods 0.2.1 (2022-02-11)","title":"phsmethods 0.2.1 (2022-02-11)","text":"Three functions renamed improve code clarity: postcode() format_postcode(); age_group() create_age_groups(); fin_year() extract_fin_year(). old functions still work produce warning. reasonable amount time removed completely. New functions added: age_calculate()(#65, @Nic-chr); dob_from_chi()(#42, @Moohan); age_from_chi()(#42, @Moohan) Change output chi_check empty string (\"\") reports missing (#76)","code":""},{"path":"/news/index.html","id":"phsmethods-020-2020-04-17","dir":"Changelog","previous_headings":"","what":"phsmethods 0.2.0 (2020-04-17)","title":"phsmethods 0.2.0 (2020-04-17)","text":"New functions added: age_group()(#23, @chrisdeans); chi_check()(#30, @graemegowans); chi_pad()(#30, @graemegowans); match_area()(#13, @jvillacampa). first argument postcode() now x, opposed string. unlikely break much, , existing code. postcode() also now slightly faster. phsmethods longer imports stringi. phsmethods now depends version R >= 2.10. Jack Hannah longer maintainer.","code":""},{"path":"/news/index.html","id":"phsmethods-011-2020-02-10","dir":"Changelog","previous_headings":"","what":"phsmethods 0.1.1 (2020-02-10)","title":"phsmethods 0.1.1 (2020-02-10)","text":"file_size(), fin_year(), qtr(), qtr_end(), qtr_next() qtr_prev() now use inherits(x, \"y\") instead class(x) == \"y\" check class. reasoning explained blogpost Martin Maechler. performance fin_year() improved. function now extracts unique date(s) input, calculates associated financial year(s), joins original input. contrast original method, directly calculated financial year input dates individually.","code":""},{"path":"/news/index.html","id":"phsmethods-010-2020-01-24","dir":"Changelog","previous_headings":"","what":"phsmethods 0.1.0 (2020-01-24)","title":"phsmethods 0.1.0 (2020-01-24)","text":"Initial package release. file_size(), fin_year(), postcode(), qtr(), qtr_end(), qtr_next() qtr_prev() functions added.","code":""}]
